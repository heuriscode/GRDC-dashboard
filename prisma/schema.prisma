// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id Int @id @default(autoincrement())
  name String
  sites Site[] // each region can have multiple sites
  events Event[]
}

model Site {
  id Int @id @default(autoincrement())
  name String
  region Region? @relation(fields:[regionId], references:[id])
  regionId Int @unique
  plots Plot[] // each site can have multiple plots
  groups Group[] // each site has many groups that hold subplots (conceptual def)

  // link to consultant that manages the site
  consultant Consultant? @relation(fields:[consultantId], references: [id])
  consultantId Int @unique

  events Event[]
}

// Each site has a single consultant managing that site
// each consultant can manage multiple sites
model Consultant {
  id Int @id @default(autoincrement())
  name String
  contactName String
  contactEmail String
  contactPhone Int

  // user
  users User[] // references user model holding auth data

  // sites
  sites Site[]
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String
  // use passwordless authentication

  consultant Consultant? @relation(fields:[consultantId], references:[id])
  consultantId Int @unique

  approved Boolean //consultant can approve/disapprove users - allows retention of user profiles for later use/tracking and avoids problems associated with deleting users (don't delete users...)
}

// researchers have no links to any particular table but have access to the db
model Researcher {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String
  // use passwordless authentication
}

model Plot {
  id Int @id @default(autoincrement())
  name String
  site Site? @relation(fields:[siteId], references:[id])
  siteId Int @unique
  system String // each plot has a particular farming system
  subplots Subplot[]

  events Event[]
}

model Subplot {
  id Int @id @default(autoincrement())
  label String

  plot Plot? @relation(fields:[plotId], references:[id])
  plotId Int @unique

  group Group? @relation(fields:[groupId], references: [id])
  groupId Int @unique

  events Event[]
}

model Group {
  id Int @id @default(autoincrement())
  label String // an alphanumeric label for each group
  
  // each group is within a site and should be referencable for that site
  site Site? @relation(fields:[siteId], references: [id])
  siteId Int @unique

  // each group has many subplots
  subplots Subplot[]
}

// Event can occur at region, site, plot and subplot level
model Event {
  id Int @id @default(autoincrement())
  description String // longString??

  // region
  region Region? @relation(fields:[regionId], references:[id])
  regionId Int @unique

  // site
  site Site? @relation(fields:[siteId], references: [id])
  siteId Int @unique

  // plot
  plot Plot? @relation(fields:[plotId], references: [id])
  plotId Int @unique

  // subplot
  subplot Subplot? @relation(fields:[subplotId], references: [id])
  subplotId Int @unique

  // add detail on what impact event had
}

